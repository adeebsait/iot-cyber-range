version: '3.8'

networks:
  iot-network:
    driver: bridge

volumes:
  es-data:
  suricata-logs:
  metrics-data:
  evaluation-data:

services:
  # Core Infrastructure
  mqtt-broker:
    image: eclipse-mosquitto:2.0
    container_name: mqtt-broker
    networks:
      - iot-network
    volumes:
      - ./mosquitto.conf:/mosquitto/config/mosquitto.conf
    ports:
      - "1883:1883"
    restart: unless-stopped

  zookeeper:
    image: wurstmeister/zookeeper:latest
    container_name: zookeeper
    networks:
      - iot-network
    ports:
      - "2181:2181"
    restart: unless-stopped

  kafka:
    image: wurstmeister/kafka:latest
    container_name: kafka
    networks:
      - iot-network
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_ADVERTISED_PORT: 9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_CREATE_TOPICS: "security-alerts:1:1,device-telemetry:1:1,ai-alerts:1:1,baseline-alerts:1:1,ground-truth:1:1,simulated-anomalies:1:1"
    restart: unless-stopped

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.6.0
    container_name: elasticsearch
    networks:
      - iot-network
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
    volumes:
      - es-data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    restart: unless-stopped

  logstash:
    image: docker.elastic.co/logstash/logstash:8.6.0
    container_name: logstash
    networks:
      - iot-network
    depends_on:
      - elasticsearch
      - kafka
      - suricata
    volumes:
      - ./logstash/pipeline/:/usr/share/logstash/pipeline/:ro
      - suricata-logs:/var/log/suricata:ro
    ports:
      - "5044:5044"
    restart: unless-stopped

  kibana:
    image: docker.elastic.co/kibana/kibana:8.6.0
    container_name: kibana
    networks:
      - iot-network
    depends_on:
      - elasticsearch
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - xpack.security.enabled=false
    ports:
      - "5601:5601"
    restart: unless-stopped

  # IoT Simulation Layer
  device-sim:
    build: ./devices
    container_name: device-sim
    networks:
      - iot-network
    environment:
      MQTT_BROKER: mqtt-broker
      MQTT_PORT: 1883
      DEVICE_ID: device01
    depends_on:
      - mqtt-broker
    restart: unless-stopped

  threat-emulator:
    build: ./threat-emulator
    container_name: threat-emulator
    networks:
      - iot-network
    environment:
      MQTT_BROKER: mqtt-broker
      MQTT_PORT: 1883
    depends_on:
      - mqtt-broker
    restart: "no"

  suricata:
    image: jasonish/suricata:latest
    container_name: suricata
    cap_add:
      - NET_ADMIN
      - NET_RAW
      - SETUID
      - SETGID
      - SETPCAP
      - SYS_NICE
    network_mode: host
    user: root
    volumes:
      - ./suricata.yaml:/etc/suricata/suricata.yaml:rw
      - ./rules:/etc/suricata/rules:rw
      - suricata-logs:/var/log/suricata
    command: [
      "-c", "/etc/suricata/suricata.yaml",
      "-i", "ens33",
      "-i", "lo",
      "--init-errors-fatal"
    ]
    restart: unless-stopped

  mqtt-kafka-bridge:
    build: ./mqtt-kafka-bridge
    container_name: mqtt-kafka-bridge
    networks:
      - iot-network
    depends_on:
      - kafka
      - mqtt-broker
    environment:
      MQTT_BROKER: mqtt-broker
      MQTT_PORT: 1883
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    restart: unless-stopped

  # AI Detection Systems
  detection-agent:
    build: ./ai-agents/detection-agent
    container_name: detection-agent
    networks:
      - iot-network
    depends_on:
      - kafka
      - mqtt-kafka-bridge
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    restart: unless-stopped

  # Baseline Detection Systems
  suricata-only-detector:
    build: ./baseline-detectors
    container_name: suricata-only-detector
    networks:
      - iot-network
    depends_on:
      - kafka
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    command: ["python", "suricata_only_detector.py"]
    restart: unless-stopped

  lstm-only-detector:
    build: ./baseline-detectors
    container_name: lstm-only-detector
    networks:
      - iot-network
    depends_on:
      - kafka
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    command: ["python", "lstm_only_detector.py"]
    restart: unless-stopped

  isolation-forest-detector:
    build: ./baseline-detectors
    container_name: isolation-forest-detector
    networks:
      - iot-network
    depends_on:
      - kafka
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    command: ["python", "isolation_forest_detector.py"]
    restart: unless-stopped

  # Metrics and Evaluation Systems
  metrics-collector:
    build: ./metrics-system
    container_name: metrics-collector
    networks:
      - iot-network
    depends_on:
      - kafka
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    restart: unless-stopped

  performance-evaluator:
    build: ./evaluation-framework
    container_name: performance-evaluator
    networks:
      - iot-network
    depends_on:
      - kafka
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    volumes:
      - evaluation-data:/app
      - /var/run/docker.sock:/var/run/docker.sock
      - /usr/bin/docker-compose:/usr/bin/docker-compose
    command: ["python", "performance_evaluator.py"]
    restart: unless-stopped

  attack-simulator:
    build: ./evaluation-framework
    container_name: attack-simulator
    networks:
      - iot-network
    depends_on:
      - kafka
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /usr/bin/docker-compose:/usr/bin/docker-compose
      - .:/workspace
    working_dir: /workspace
    command: ["python", "attack_simulator.py"]
    restart: "no"  # Run once for evaluation

  # Web Dashboard (Optional - for visualization)
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    networks:
      - iot-network
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - ./grafana:/etc/grafana/provisioning
    restart: unless-stopped
