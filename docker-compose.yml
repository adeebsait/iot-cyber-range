version: '3.8'

networks:
  iot-network:
    driver: bridge

volumes:
  es-data:
  suricata-logs:

services:
  mqtt-broker:
    image: eclipse-mosquitto:2.0
    container_name: mqtt-broker
    networks:
      - iot-network
    volumes:
      - ./mosquitto.conf:/mosquitto/config/mosquitto.conf
    ports:
      - "1883:1883"
    restart: unless-stopped

  device-sim:
    build: ./devices
    container_name: device-sim
    networks:
      - iot-network
    environment:
      MQTT_BROKER: mqtt-broker
      MQTT_PORT: 1883
      DEVICE_ID: device01
    depends_on:
      - mqtt-broker
    restart: unless-stopped

  threat-emulator:
    build: ./threat-emulator
    container_name: threat-emulator
    networks:
      - iot-network
    environment:
      MQTT_BROKER: mqtt-broker
      MQTT_PORT: 1883
    depends_on:
      - mqtt-broker
    restart: "no"

  suricata:
    image: jasonish/suricata:latest
    container_name: suricata
    cap_add:
      - NET_ADMIN
      - NET_RAW
      - SETUID
      - SETGID
      - SETPCAP
      - SYS_NICE
    network_mode: host
    user: root
    volumes:
      - ./suricata.yaml:/etc/suricata/suricata.yaml:rw
      - ./rules:/etc/suricata/rules:rw
      - suricata-logs:/var/log/suricata
    command: [
      "-c", "/etc/suricata/suricata.yaml",
      "-i", "ens33",
      "-i", "lo",
      "--init-errors-fatal"
    ]
    restart: unless-stopped

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    networks:
      - iot-network
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    restart: unless-stopped

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    networks:
      - iot-network
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 30s
      timeout: 10s
      retries: 5

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.6.0
    container_name: elasticsearch
    networks:
      - iot-network
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
    volumes:
      - es-data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  logstash:
    image: docker.elastic.co/logstash/logstash:8.6.0
    container_name: logstash
    networks:
      - iot-network
    depends_on:
      elasticsearch:
        condition: service_healthy
      kafka:
        condition: service_healthy
      suricata:
        condition: service_started
    volumes:
      - ./logstash/pipeline/:/usr/share/logstash/pipeline/:ro
      - suricata-logs:/var/log/suricata:ro
    ports:
      - "5044:5044"
    restart: unless-stopped

  kibana:
    image: docker.elastic.co/kibana/kibana:8.6.0
    container_name: kibana
    networks:
      - iot-network
    depends_on:
      elasticsearch:
        condition: service_healthy
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - xpack.security.enabled=false
    ports:
      - "5601:5601"
    restart: unless-stopped

  # AI Detection Agent
  detection-agent:
    build: ./ai-agents/detection-agent
    container_name: detection-agent
    networks:
      - iot-network
    depends_on:
      kafka:
        condition: service_healthy
      mqtt-broker:
        condition: service_started
    environment:
      MQTT_BROKER: mqtt-broker
      MQTT_PORT: 1883
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      ELASTICSEARCH_HOST: elasticsearch:9200
    volumes:
      - ./ai-agents/detection-agent/models:/app/models
    restart: unless-stopped

  # AI Response Agent
  response-agent:
    build: ./ai-agents/response-agent
    container_name: response-agent
    networks:
      - iot-network
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      MQTT_BROKER: mqtt-broker
      MQTT_PORT: 1883
    volumes:
      - ./ai-agents/response-agent/models:/app/models
    restart: unless-stopped
